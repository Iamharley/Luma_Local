#!/usr/bin/env python3
"""
LUMA Business Pro - Backend Server
Assistant IA Personnel avec surveillance m√©dicale et domotique
"""

import asyncio
import json
import logging
import os
import sys
import time
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
import threading
import subprocess
import psutil

# Web server
from flask import Flask, render_template, request, jsonify, send_from_directory
from flask_socketio import SocketIO, emit
from flask_cors import CORS

# IA et APIs
import requests
import openai
from anthropic import Anthropic

# Monitoring syst√®me
import cv2
import numpy as np
import speech_recognition as sr
import pyttsx3

# Domotique et int√©grations
import applescript

# Configuration logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('luma.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger('LUMA')

class LumaConfig:
    """Configuration centralis√©e de LUMA"""
    
    def __init__(self):
        self.load_config()
    
    def load_config(self):
        """Charge la configuration depuis les variables d'environnement ou fichier"""
        self.ANTHROPIC_API_KEY = os.getenv('ANTHROPIC_API_KEY', '')
        self.OPENAI_API_KEY = os.getenv('OPENAI_API_KEY', '')
        self.GEMINI_API_KEY = os.getenv('GEMINI_API_KEY', '')
        
        # Configuration m√©dicale
        self.MEDICAL_MONITORING = True
        self.EMERGENCY_CONTACTS = [
            {'name': 'SAMU', 'number': '15', 'type': 'emergency'},
            {'name': 'Dr. Martin', 'number': '+33612345678', 'type': 'doctor'},
            {'name': 'Famille', 'number': '+33687654321', 'type': 'family'}
        ]
        
        # Configuration domotique
        self.HOMEKIT_ENABLED = True
        self.ALEXA_ENABLED = True
        
        # Configuration IA
        self.DEFAULT_AI_MODEL = 'claude'  # claude, gpt, gemini, local
        self.VOICE_ENABLED = True
        self.WAKE_WORD = 'hey luma'
        
        logger.info("Configuration LUMA charg√©e")

class MedicalMonitor:
    """Surveillance m√©dicale et d√©tection d'√©pilepsie"""
    
    def __init__(self, config: LumaConfig):
        self.config = config
        self.monitoring_active = False
        self.camera = None
        self.biometric_data = {}
        self.last_seizure_risk = 'LOW'
        
    def start_monitoring(self):
        """D√©marre la surveillance m√©dicale"""
        if not self.config.MEDICAL_MONITORING:
            return
            
        logger.info("üè• D√©marrage surveillance m√©dicale")
        self.monitoring_active = True
        
        # Thread pour la surveillance cam√©ra
        threading.Thread(target=self._camera_monitoring, daemon=True).start()
        
        # Thread pour la simulation biom√©trique (en attendant vrais capteurs)
        threading.Thread(target=self._biometric_simulation, daemon=True).start()
        
    def _camera_monitoring(self):
        """Surveillance par cam√©ra pour d√©tection d'√©pilepsie"""
        try:
            self.camera = cv2.VideoCapture(0)
            face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
            
            while self.monitoring_active:
                ret, frame = self.camera.read()
                if not ret:
                    time.sleep(1)
                    continue
                
                # D√©tection de visage et analyse mouvement
                gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
                faces = face_cascade.detectMultiScale(gray, 1.1, 4)
                
                # Analyse simple pour d√©tection d'anomalies
                risk_level = self._analyze_movement_patterns(frame)
                
                if risk_level == 'HIGH':
                    logger.warning("‚ö†Ô∏è RISQUE √âPILEPSIE D√âTECT√â!")
                    self._trigger_medical_alert()
                
                time.sleep(0.1)  # 10 FPS
                
        except Exception as e:
            logger.error(f"Erreur surveillance cam√©ra: {e}")
        finally:
            if self.camera:
                self.camera.release()
    
    def _analyze_movement_patterns(self, frame) -> str:
        """Analyse les patterns de mouvement pour d√©tecter une crise"""
        # Simulation d'analyse - dans la vraie version, ici on aurait
        # de la computer vision avanc√©e pour d√©tecter les mouvements convulsifs
        
        # Pour l'instant, simulation al√©atoire de risque faible
        import random
        risk_chance = random.random()
        
        if risk_chance < 0.001:  # 0.1% de chance de d√©tecter un risque
            return 'HIGH'
        elif risk_chance < 0.01:  # 1% de chance de risque mod√©r√©
            return 'MEDIUM'
        else:
            return 'LOW'
    
    def _biometric_simulation(self):
        """Simulation des donn√©es biom√©triques"""
        while self.monitoring_active:
            # G√©n√©ration de donn√©es r√©alistes
            self.biometric_data = {
                'heart_rate': 68 + np.random.randint(-8, 15),
                'temperature': round(36.5 + np.random.uniform(-0.3, 0.8), 1),
                'oxygen_saturation': 97 + np.random.randint(0, 3),
                'breathing_rate': 14 + np.random.randint(-2, 6),
                'timestamp': datetime.now().isoformat()
            }
            
            # √âvaluation du risque d'√©pilepsie bas√©e sur les m√©triques
            risk = self._evaluate_seizure_risk()
            self.biometric_data['seizure_risk'] = risk
            
            time.sleep(3)  # Mise √† jour toutes les 3 secondes
    
    def _evaluate_seizure_risk(self) -> str:
        """√âvalue le risque de crise d'√©pilepsie"""
        hr = self.biometric_data.get('heart_rate', 70)
        temp = self.biometric_data.get('temperature', 36.7)
        
        # R√®gles simples d'√©valuation
        if hr > 100 or hr < 50 or temp > 38.0:
            return 'MEDIUM'
        elif hr > 90 or temp > 37.5:
            return 'LOW-MEDIUM'
        else:
            return 'LOW'
    
    def _trigger_medical_alert(self):
        """D√©clenche une alerte m√©dicale"""
        logger.critical("üö® ALERTE M√âDICALE D√âCLENCH√âE!")
        
        # Appel automatique des secours (simulation)
        for contact in self.config.EMERGENCY_CONTACTS:
            logger.info(f"üìû Appel automatique: {contact['name']} - {contact['number']}")
            
            # Dans une vraie impl√©mentation, ici on d√©clencherait:
            # - Appel t√©l√©phonique automatique via Siri Shortcuts
            # - SMS d'urgence avec g√©olocalisation
            # - Notification aux proches
        
        # Notification syst√®me
        try:
            applescript.run('''
                display notification "ALERTE M√âDICALE D√âCLENCH√âE - Secours contact√©s" 
                with title "üö® LUMA URGENCE" sound name "Sosumi"
            ''')
        except:
            pass
    
    def get_status(self) -> Dict[str, Any]:
        """Retourne le statut m√©dical actuel"""
        return {
            'monitoring_active': self.monitoring_active,
            'biometric_data': self.biometric_data,
            'last_update': datetime.now().isoformat(),
            'camera_status': 'active' if self.camera else 'inactive'
        }

class AIBrain:
    """Cerveau IA hybride - routage intelligent entre mod√®les"""
    
    def __init__(self, config: LumaConfig):
        self.config = config
        self.claude_client = None
        self.setup_ai_clients()
    
    def setup_ai_clients(self):
        """Configure les clients IA"""
        try:
            if self.config.ANTHROPIC_API_KEY:
                self.claude_client = Anthropic(api_key=self.config.ANTHROPIC_API_KEY)
                logger.info("‚úÖ Claude configur√©")
        except Exception as e:
            logger.error(f"Erreur config Claude: {e}")
        
        try:
            if self.config.OPENAI_API_KEY:
                openai.api_key = self.config.OPENAI_API_KEY
                logger.info("‚úÖ OpenAI configur√©")
        except Exception as e:
            logger.error(f"Erreur config OpenAI: {e}")
    
    def process_query(self, query: str, context: Dict = None) -> Dict[str, Any]:
        """Route la requ√™te vers le bon mod√®le IA"""
        
        # Analyse de la complexit√© de la requ√™te
        complexity = self._analyze_query_complexity(query)
        
        # Routage intelligent
        if complexity == 'simple':
            model = 'local'  # Ollama local pour √©conomiser
        elif complexity == 'medium':
            model = 'gpt'    # GPT pour l'√©quilibre
        else:
            model = 'claude' # Claude pour les t√¢ches complexes
        
        response = self._get_ai_response(query, model, context)
        
        return {
            'response': response,
            'model_used': model,
            'complexity': complexity,
            'timestamp': datetime.now().isoformat()
        }
    
    def _analyze_query_complexity(self, query: str) -> str:
        """Analyse la complexit√© d'une requ√™te"""
        query_lower = query.lower()
        
        # Requ√™tes simples
        simple_keywords = ['email', 'agenda', 'm√©t√©o', 'heure', 'date', 'hello', 'bonjour']
        if any(keyword in query_lower for keyword in simple_keywords):
            return 'simple'
        
        # Requ√™tes complexes
        complex_keywords = ['strat√©gie', 'analyse', 'optimisation', 'conseil', 'cr√©er', 'r√©diger']
        if any(keyword in query_lower for keyword in complex_keywords):
            return 'complex'
        
        return 'medium'
    
    def _get_ai_response(self, query: str, model: str, context: Dict = None) -> str:
        """Obtient la r√©ponse du mod√®le sp√©cifi√©"""
        
        try:
            if model == 'claude' and self.claude_client:
                return self._ask_claude(query, context)
            elif model == 'gpt' and openai.api_key:
                return self._ask_gpt(query, context)
            elif model == 'local':
                return self._ask_ollama(query, context)
            else:
                return self._fallback_response(query)
                
        except Exception as e:
            logger.error(f"Erreur IA {model}: {e}")
            return self._fallback_response(query)
    
    def _ask_claude(self, query: str, context: Dict = None) -> str:
        """Requ√™te vers Claude"""
        try:
            message = self.claude_client.messages.create(
                model="claude-3-sonnet-20240229",
                max_tokens=1000,
                messages=[{
                    "role": "user", 
                    "content": f"En tant qu'assistant personnel LUMA, r√©ponds √†: {query}"
                }]
            )
            return message.content[0].text
        except Exception as e:
            logger.error(f"Erreur Claude: {e}")
            return self._fallback_response(query)
    
    def _ask_gpt(self, query: str, context: Dict = None) -> str:
        """Requ√™te vers GPT"""
        try:
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[{
                    "role": "system",
                    "content": "Tu es LUMA, l'assistant IA personnel d'Anne-Sophie."
                }, {
                    "role": "user",
                    "content": query
                }],
                max_tokens=500
            )
            return response.choices[0].message.content
        except Exception as e:
            logger.error(f"Erreur GPT: {e}")
            return self._fallback_response(query)
    
    def _ask_ollama(self, query: str, context: Dict = None) -> str:
        """Requ√™te vers Ollama local"""
        try:
            response = requests.post('http://localhost:11434/api/generate', 
                json={
                    'model': 'mistral',
                    'prompt': f"En tant qu'assistant LUMA, r√©ponds bri√®vement √†: {query}",
                    'stream': False
                },
                timeout=10
            )
            
            if response.status_code == 200:
                return response.json().get('response', 'Erreur de g√©n√©ration')
            else:
                return self._fallback_response(query)
                
        except Exception as e:
            logger.error(f"Erreur Ollama: {e}")
            return self._fallback_response(query)
    
    def _fallback_response(self, query: str) -> str:
        """R√©ponse de secours quand les IA ne fonctionnent pas"""
        fallback_responses = {
            'email': 'Je v√©rifie vos emails... Fonctionnalit√© en cours de configuration.',
            'agenda': 'Consultation de votre agenda... Configuration en cours.',
            'm√©t√©o': 'Service m√©t√©o temporairement indisponible.',
            'shopify': 'Connexion √† Shopify en cours de configuration.',
            'default': 'Je suis temporairement en mode r√©duit. Toutes mes fonctions seront bient√¥t disponibles !'
        }
        
        query_lower = query.lower()
        for key, response in fallback_responses.items():
            if key in query_lower:
                return response
        
        return fallback_responses['default']

class DomoticController:
    """Contr√¥leur domotique - HomeKit, Alexa, etc."""
    
    def __init__(self, config: LumaConfig):
        self.config = config
        self.devices = {}
        self.scenes = {}
        self.setup_devices()
    
    def setup_devices(self):
        """Configuration des appareils domotiques"""
        # Simulation d'appareils connect√©s
        self.devices = {
            'lights': {
                'salon': {'brightness': 75, 'status': 'on'},
                'chambre': {'brightness': 50, 'status': 'off'},
                'cuisine': {'brightness': 80, 'status': 'on'}
            },
            'climate': {
                'temperature': 22,
                'mode': 'auto',
                'status': 'on'
            },
            'security': {
                'status': 'armed',
                'cameras': 4,
                'sensors': 8
            },
            'audio': {
                'status': 'off',
                'volume': 30,
                'source': 'spotify'
            }
        }
        
        self.scenes = {
            'morning': 'Sc√®ne R√©veil',
            'evening': 'Sc√®ne Soir√©e', 
            'sleep': 'Sc√®ne Sommeil',
            'away': 'Sc√®ne Absence'
        }
        
        logger.info("üè° Contr√¥leur domotique initialis√©")
    
    def control_device(self, device: str, action: str, value: Any = None) -> Dict[str, Any]:
        """Contr√¥le un appareil domotique"""
        
        try:
            if device == 'lights':
                return self._control_lights(action, value)
            elif device == 'climate':
                return self._control_climate(action, value)
            elif device == 'security':
                return self._control_security(action, value)
            elif device == 'audio':
                return self._control_audio(action, value)
            else:
                return {'status': 'error', 'message': f'Appareil {device} non reconnu'}
                
        except Exception as e:
            logger.error(f"Erreur contr√¥le domotique: {e}")
            return {'status': 'error', 'message': str(e)}
    
    def _control_lights(self, action: str, value: Any) -> Dict[str, Any]:
        """Contr√¥le de l'√©clairage"""
        if action == 'set_brightness':
            room = value.get('room', 'salon')
            brightness = value.get('brightness', 50)
            
            if room in self.devices['lights']:
                self.devices['lights'][room]['brightness'] = brightness
                self.devices['lights'][room]['status'] = 'on' if brightness > 0 else 'off'
                
                return {
                    'status': 'success',
                    'message': f'Luminosit√© {room} r√©gl√©e √† {brightness}%'
                }
        
        elif action == 'toggle':
            room = value.get('room', 'salon')
            if room in self.devices['lights']:
                current_status = self.devices['lights'][room]['status']
                new_status = 'off' if current_status == 'on' else 'on'
                self.devices['lights'][room]['status'] = new_status
                
                return {
                    'status': 'success',
                    'message': f'√âclairage {room} {new_status}'
                }
        
        return {'status': 'error', 'message': 'Action √©clairage non reconnue'}
    
    def _control_climate(self, action: str, value: Any) -> Dict[str, Any]:
        """Contr√¥le de la climatisation"""
        if action == 'set_temperature':
            temperature = value.get('temperature', 22)
            self.devices['climate']['temperature'] = temperature
            
            return {
                'status': 'success',
                'message': f'Temp√©rature r√©gl√©e √† {temperature}¬∞C'
            }
        
        return {'status': 'error', 'message': 'Action climat non reconnue'}
    
    def _control_security(self, action: str, value: Any) -> Dict[str, Any]:
        """Contr√¥le de la s√©curit√©"""
        if action == 'toggle':
            current = self.devices['security']['status']
            new_status = 'disarmed' if current == 'armed' else 'armed'
            self.devices['security']['status'] = new_status
            
            return {
                'status': 'success',
                'message': f'S√©curit√© {new_status}'
            }
        
        return {'status': 'error', 'message': 'Action s√©curit√© non reconnue'}
    
    def _control_audio(self, action: str, value: Any) -> Dict[str, Any]:
        """Contr√¥le audio"""
        if action == 'toggle':
            current = self.devices['audio']['status']
            new_status = 'off' if current == 'on' else 'on'
            self.devices['audio']['status'] = new_status
            
            return {
                'status': 'success',
                'message': f'Audio {new_status}'
            }
        
        return {'status': 'error', 'message': 'Action audio non reconnue'}
    
    def activate_scene(self, scene: str) -> Dict[str, Any]:
        """Active une sc√®ne domotique"""
        if scene not in self.scenes:
            return {'status': 'error', 'message': f'Sc√®ne {scene} non trouv√©e'}
        
        scene_actions = {
            'morning': {
                'lights': {'salon': 60, 'cuisine': 80},
                'temperature': 21,
                'audio': 'on'
            },
            'evening': {
                'lights': {'salon': 40, 'chambre': 30},
                'temperature': 22,
                'audio': 'on'
            },
            'sleep': {
                'lights': {'all': 0},
                'temperature': 19,
                'audio': 'off'
            },
            'away': {
                'lights': {'security': 20},
                'temperature': 18,
                'security': 'armed'
            }
        }
        
        # Application des actions de la sc√®ne
        actions = scene_actions.get(scene, {})
        
        return {
            'status': 'success',
            'message': f'Sc√®ne {self.scenes[scene]} activ√©e',
            'actions_applied': actions
        }
    
    def get_status(self) -> Dict[str, Any]:
        """Retourne le statut de tous les appareils"""
        return {
            'devices': self.devices,
            'scenes': self.scenes,
            'last_update': datetime.now().isoformat()
        }

class BusinessAnalytics:
    """Analytics business - Shopify, emails, KPIs"""
    
    def __init__(self, config: LumaConfig):
        self.config = config
        self.metrics = {}
        self.update_metrics()
    
    def update_metrics(self):
        """Met √† jour les m√©triques business"""
        # Simulation de donn√©es Shopify
        base_revenue = 12450
        daily_revenue = 3127
        orders = 247
        
        # Simulation de variations r√©alistes
        import random
        revenue_variation = random.uniform(0.85, 1.15)
        orders_variation = random.uniform(0.9, 1.1)
        
        self.metrics = {
            'revenue': {
                'monthly': int(base_revenue * revenue_variation),
                'daily': int(daily_revenue * revenue_variation),
                'target': 41200,
                'currency': 'EUR'
            },
            'orders': {
                'monthly': int(orders * orders_variation),
                'daily': random.randint(8, 25),
                'conversion_rate': round(random.uniform(0.85, 0.92), 3)
            },
            'customers': {
                'new_monthly': random.randint(15, 25),
                'satisfaction': round(random.uniform(0.92, 0.96), 3),
                'return_rate': round(random.uniform(0.02, 0.04), 3)
            },
            'inventory': {
                'low_stock_items': random.randint(3, 8),
                'out_of_stock': random.randint(0, 2)
            },
            'marketing': {
                'abandoned_carts': random.randint(8, 15),
                'email_open_rate': round(random.uniform(0.25, 0.35), 3),
                'social_engagement': round(random.uniform(0.04, 0.08), 3)
            }
        }
        
        logger.info("üìä M√©triques business mises √† jour")
    
    def get_recommendations(self) -> List[Dict[str, str]]:
        """G√©n√®re des recommandations business"""
        recommendations = []
        
        # Analyse des paniers abandonn√©s
        abandoned = self.metrics['marketing']['abandoned_carts']
        if abandoned > 10:
            recommendations.append({
                'type': 'urgent',
                'title': f'üìß Relancer {abandoned} paniers abandonn√©s',
                'description': f'Potentiel de r√©cup√©ration: ~‚Ç¨{abandoned * 45}',
                'action': 'send_abandoned_cart_emails'
            })
        
        # Analyse des stocks
        low_stock = self.metrics['inventory']['low_stock_items']
        if low_stock > 5:
            recommendations.append({
                'type': 'warning',
                'title': f'üì¶ {low_stock} produits en stock faible',
                'description': 'Recommandation de r√©approvisionnement',
                'action': 'reorder_inventory'
            })
        
        # Opportunit√©s marketing
        engagement = self.metrics['marketing']['social_engagement']
        if engagement < 0.06:
            recommendations.append({
                'type': 'opportunity',
                'title': 'üì± Am√©liorer engagement r√©seaux sociaux',
                'description': f'Taux actuel: {engagement:.1%} (objectif: 8%)',
                'action': 'create_social_content'
            })
        
        return recommendations
    
    def get_dashboard_data(self) -> Dict[str, Any]:
        """Retourne les donn√©es pour le dashboard"""
        self.update_metrics()
        
        return {
            'metrics': self.metrics,
            'recommendations': self.get_recommendations(),
            'last_update': datetime.now().isoformat()
        }

class LumaServer:
    """Serveur principal LUMA"""
    
    def __init__(self):
        self.config = LumaConfig()
        self.app = Flask(__name__)
        self.app.config['SECRET_KEY'] = 'luma-secret-key-2024'
        
        # Configuration CORS et SocketIO
        CORS(self.app)
        self.socketio = SocketIO(self.app, cors_allowed_origins="*")
        
        # Initialisation des modules
        self.medical_monitor = MedicalMonitor(self.config)
        self.ai_brain = AIBrain(self.config)
        self.domotic_controller = DomoticController(self.config)
        self.business_analytics = BusinessAnalytics(self.config)
        
        # Configuration des routes
        self.setup_routes()
        self.setup_socketio_events()
        
        logger.info("ü§ñ Serveur LUMA initialis√©")
    
    def setup_routes(self):
        """Configuration des routes Flask"""
        
        @self.app.route('/')
        def index():
            """Page principale"""
            logger.info("üì± Acc√®s √† l'interface LUMA")
            return send_from_directory('.', 'luma_interface.html')
        
        @self.app.route('/api/status')
        def api_status():
            """Statut g√©n√©ral du syst√®me"""
            return jsonify({
                'status': 'running',
                'timestamp': datetime.now().isoformat(),
                'modules': {
                    'medical': self.medical_monitor.monitoring_active,
                    'ai': True,
                    'domotic': True,
                    'business': True
                }
            })
        
        @self.app.route('/api/medical/status')
        def medical_status():
            """Statut m√©dical"""
            return jsonify(self.medical_monitor.get_status())
        
        @self.app.route('/api/domotic/status')
        def domotic_status():
            """Statut domotique"""
            return jsonify(self.domotic_controller.get_status())
        
        @self.app.route('/api/business/dashboard')
        def business_dashboard():
            """Dashboard business"""
            return jsonify(self.business_analytics.get_dashboard_data())
        
        @self.app.route('/api/ai/chat', methods=['POST'])
        def ai_chat():
            """Endpoint chat IA"""
            data = request.get_json()
            query = data.get('message', '')
            context = data.get('context', {})
            
            logger.info(f"üí¨ Requ√™te IA: {query}")
            response = self.ai_brain.process_query(query, context)
            
            return jsonify(response)
        
        @self.app.route('/api/domotic/control', methods=['POST'])
        def domotic_control():
            """Contr√¥le domotique"""
            data = request.get_json()
            device = data.get('device')
            action = data.get('action')
            value = data.get('value')
            
            logger.info(f"üè° Contr√¥le domotique: {device} - {action}")
            response = self.domotic_controller.control_device(device, action, value)
            
            return jsonify(response)
        
        @self.app.route('/api/domotic/scene/<scene>', methods=['POST'])
        def activate_scene(scene):
            """Active une sc√®ne domotique"""
            logger.info(f"üé¨ Activation sc√®ne: {scene}")
            response = self.domotic_controller.activate_scene(scene)
            
            return jsonify(response)
        
        @self.app.route('/api/emergency/trigger', methods=['POST'])
        def emergency_trigger():
            """D√©clenche une alerte d'urgence"""
            logger.critical("üö® ALERTE URGENCE D√âCLENCH√âE VIA API!")
            self.medical_monitor._trigger_medical_alert()
            
            return jsonify({
                'status': 'emergency_triggered',
                'message': 'Alerte d\'urgence d√©clench√©e - Secours contact√©s',
                'timestamp': datetime.now().isoformat()
            })
    
    def setup_socketio_events(self):
        """Configuration des √©v√©nements SocketIO pour temps r√©el"""
        
        @self.socketio.on('connect')
        def on_connect():
            logger.info("üîå Client connect√© via WebSocket")
            emit('status', {'message': 'LUMA connect√©'})
        
        @self.socketio.on('disconnect') 
        def on_disconnect():
            logger.info("üîå Client d√©connect√©")
        
        @self.socketio.on('request_medical_update')
        def on_medical_update():
            """Envoi des donn√©es m√©dicales en temps r√©el"""
            data = self.medical_monitor.get_status()
            emit('medical_update', data)
        
        @self.socketio.on('request_business_update')
        def on_business_update():
            """Envoi des donn√©es business"""
            data = self.business_analytics.get_dashboard_data()
            emit('business_update', data)
    
    def start_background_tasks(self):
        """D√©marre les t√¢ches en arri√®re-plan"""
        
        # Surveillance m√©dicale
        self.medical_monitor.start_monitoring()
        
        # Mise √† jour p√©riodique des donn√©es
        def periodic_updates():
            while True:
                try:
                    # Mise √† jour m√©triques business
                    self.business_analytics.update_metrics()
                    
                    # √âmission des mises √† jour via WebSocket
                    self.socketio.emit('medical_update', 
                                     self.medical_monitor.get_status())
                    self.socketio.emit('business_update', 
                                     self.business_analytics.get_dashboard_data())
                    
                    time.sleep(30)  # Mise √† jour toutes les 30 secondes
                    
                except Exception as e:
                    logger.error(f"Erreur mise √† jour p√©riodique: {e}")
                    time.sleep(10)
        
        # D√©marrage du thread de mise √† jour
        threading.Thread(target=periodic_updates, daemon=True).start()
        
        logger.info("üîÑ T√¢ches en arri√®re-plan d√©marr√©es")
    
    def run(self, host='127.0.0.1', port=8080, debug=False):
        """Lance le serveur LUMA"""
        
        # D√©marrage des t√¢ches en arri√®re-plan
        self.start_background_tasks()
        
        logger.info(f"üöÄ LUMA Business Pro d√©marr√© sur http://{host}:{port}")
        
        # Message d'accueil
        print("\n" + "="*60)
        print("ü§ñ LUMA BUSINESS PRO - Assistant IA Personnel")
        print("="*60)
        print(f"üåê Interface web: http://{host}:{port}")
        print("üè• Surveillance m√©dicale: ACTIVE")
        print("üè° Contr√¥le domotique: PR√äT")
        print("üìä Analytics business: EN LIGNE")
        print("üß† IA hybride: OP√âRATIONNELLE")
        print("="*60 + "\n")
        
        # Lancement du serveur
        self.socketio.run(
            self.app, 
            host=host, 
            port=port, 
            debug=debug,
            allow_unsafe_werkzeug=True
        )

def main():
    """Point d'entr√©e principal"""
    
    # V√©rification des pr√©requis
    try:
        import cv2, numpy, flask, anthropic, openai
        logger.info("‚úÖ Toutes les d√©pendances sont install√©es")
    except ImportError as e:
        logger.error(f"‚ùå D√©pendance manquante: {e}")
        print("Installez les d√©pendances avec: pip install -r requirements.txt")
        sys.exit(1)
    
    # Cr√©ation et lancement du serveur
    server = LumaServer()
    
    try:
        server.run(host='127.0.0.1', port=8080, debug=False)
    except KeyboardInterrupt:
        logger.info("üõë Arr√™t de LUMA demand√© par l'utilisateur")
    except Exception as e:
        logger.error(f"üí• Erreur fatale: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()
