#!/usr/bin/env python3
"""
LUMA Business Pro - Installation Automatique
Installe et configure LUMA sur macOS en une seule commande
"""

import os
import sys
import subprocess
import json
import shutil
import time
from pathlib import Path
import urllib.request
from typing import List, Dict, Any

# Couleurs pour l'affichage
class Colors:
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    BLUE = '\033[94m'
    PURPLE = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    END = '\033[0m'

def print_banner():
    """Affiche la banni√®re LUMA"""
    banner = f"""
{Colors.PURPLE}{Colors.BOLD}
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                              ‚ïë
‚ïë          ü§ñ LUMA BUSINESS PRO - INSTALLATION                 ‚ïë
‚ïë                                                              ‚ïë
‚ïë     Assistant IA Personnel Ultra-Avanc√©                     ‚ïë
‚ïë     ‚Ä¢ Surveillance M√©dicale 24/7                            ‚ïë
‚ïë     ‚Ä¢ IA Hybride (Claude + GPT + Local)                     ‚ïë
‚ïë     ‚Ä¢ Contr√¥le Domotique Complet                            ‚ïë
‚ïë     ‚Ä¢ Analytics Business Temps R√©el                         ‚ïë
‚ïë                                                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
{Colors.END}
    """
    print(banner)

def log(message: str, level: str = "INFO"):
    """Logging color√©"""
    colors = {
        "INFO": Colors.GREEN,
        "WARNING": Colors.YELLOW,
        "ERROR": Colors.RED,
        "SUCCESS": Colors.CYAN,
        "STEP": Colors.PURPLE + Colors.BOLD
    }
    
    timestamp = time.strftime("%H:%M:%S")
    color = colors.get(level, Colors.WHITE)
    print(f"[{timestamp}] {color}[{level}]{Colors.END} {message}")

def run_command(command: str, shell: bool = True) -> bool:
    """Ex√©cute une commande syst√®me"""
    try:
        log(f"Ex√©cution: {command}")
        result = subprocess.run(command, shell=shell, capture_output=True, text=True)
        
        if result.returncode != 0:
            log(f"Erreur commande: {result.stderr}", "ERROR")
            return False
        
        return True
    except Exception as e:
        log(f"Exception commande: {e}", "ERROR")
        return False

def check_system_requirements() -> bool:
    """V√©rifie les pr√©requis syst√®me"""
    log("V√©rification des pr√©requis syst√®me...", "STEP")
    
    # V√©rification macOS
    if sys.platform != "darwin":
        log("‚ùå LUMA est optimis√© pour macOS", "ERROR")
        return False
    log("‚úÖ macOS d√©tect√©")
    
    # V√©rification Python 3.8+
    python_version = sys.version_info
    if python_version.major < 3 or python_version.minor < 8:
        log(f"‚ùå Python 3.8+ requis (trouv√©: {python_version.major}.{python_version.minor})", "ERROR")
        return False
    log(f"‚úÖ Python {python_version.major}.{python_version.minor}")
    
    # V√©rification pip
    if not shutil.which("pip3"):
        log("‚ùå pip3 non trouv√©", "ERROR")
        return False
    log("‚úÖ pip3 disponible")
    
    # V√©rification Homebrew (recommand√©)
    if not shutil.which("brew"):
        log("‚ö†Ô∏è  Homebrew non trouv√© - Installation recommand√©e", "WARNING")
        response = input("Installer Homebrew automatiquement ? (y/n): ")
        if response.lower() == 'y':
            install_homebrew()
    else:
        log("‚úÖ Homebrew disponible")
    
    return True

def install_homebrew():
    """Installe Homebrew"""
    log("Installation de Homebrew...", "STEP")
    
    command = '/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"'
    
    if run_command(command):
        log("‚úÖ Homebrew install√© avec succ√®s", "SUCCESS")
    else:
        log("‚ùå √âchec installation Homebrew", "ERROR")

def create_project_structure():
    """Cr√©e la structure du projet LUMA"""
    log("Cr√©ation de la structure du projet...", "STEP")
    
    # Dossier principal
    project_dir = Path.home() / "Desktop" / "LUMA-BUSINESS-PRO"
    project_dir.mkdir(exist_ok=True)
    os.chdir(project_dir)
    
    log(f"üìÅ Projet cr√©√© dans: {project_dir}")
    
    # Sous-dossiers
    subdirs = [
        "logs",
        "backups", 
        "config",
        "data",
        "static",
        "templates"
    ]
    
    for subdir in subdirs:
        (project_dir / subdir).mkdir(exist_ok=True)
    
    log("‚úÖ Structure de dossiers cr√©√©e", "SUCCESS")
    return project_dir

def setup_virtual_environment():
    """Configure l'environnement virtuel Python"""
    log("Configuration de l'environnement virtuel...", "STEP")
    
    # Cr√©ation venv
    if not run_command("python3 -m venv venv"):
        log("‚ùå √âchec cr√©ation environnement virtuel", "ERROR")
        return False
    
    # Activation et mise √† jour pip
    pip_upgrade = "venv/bin/pip install --upgrade pip setuptools wheel"
    if not run_command(pip_upgrade):
        log("‚ùå √âchec mise √† jour pip", "ERROR")
        return False
    
    log("‚úÖ Environnement virtuel configur√©", "SUCCESS")
    return True

def install_python_dependencies():
    """Installe les d√©pendances Python"""
    log("Installation des d√©pendances Python...", "STEP")
    
    # D√©pendances essentielles
    dependencies = [
        "flask==2.3.3",
        "flask-socketio==5.3.6", 
        "flask-cors==4.0.0",
        "requests==2.31.0",
        "anthropic==0.7.7",
        "openai==0.28.1",
        "opencv-python==4.8.1.78",
        "numpy==1.24.3",
        "SpeechRecognition==3.10.0",
        "pyttsx3==2.90",
        "psutil==5.9.6",
        "python-dotenv==1.0.0",
        "eventlet==0.33.3"
    ]
    
    # Installation par lot pour √©viter les conflits
    for dep in dependencies:
        command = f"venv/bin/pip install {dep}"
        if not run_command(command):
            log(f"‚ö†Ô∏è  √âchec installation {dep}", "WARNING")
    
    # Installation des d√©pendances syst√®me macOS
    system_deps = [
        "portaudio",  # Pour PyAudio
        "ffmpeg"      # Pour traitement audio/vid√©o
    ]
    
    for dep in system_deps:
        if run_command(f"brew install {dep}"):
            log(f"‚úÖ {dep} install√©")
        else:
            log(f"‚ö†Ô∏è  √âchec installation {dep}", "WARNING")
    
    # Installation PyAudio (complexe sur macOS)
    if run_command("venv/bin/pip install pyaudio"):
        log("‚úÖ PyAudio install√©")
    else:
        log("‚ö†Ô∏è  PyAudio peut n√©cessiter une installation manuelle", "WARNING")
    
    log("‚úÖ D√©pendances Python install√©es", "SUCCESS")

def install_ollama():
    """Installe et configure Ollama pour l'IA locale"""
    log("Installation d'Ollama pour l'IA locale...", "STEP")
    
    # V√©rification si d√©j√† install√©
    if shutil.which("ollama"):
        log("‚úÖ Ollama d√©j√† install√©")
    else:
        # Installation Ollama
        install_cmd = 'curl -fsSL https://ollama.ai/install.sh | sh'
        if not run_command(install_cmd):
            log("‚ùå √âchec installation Ollama", "ERROR")
            return False
        log("‚úÖ Ollama install√©")
    
    # D√©marrage du service
    log("D√©marrage du service Ollama...")
    subprocess.Popen(["ollama", "serve"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    time.sleep(3)
    
    # T√©l√©chargement du mod√®le Mistral
    log("T√©l√©chargement du mod√®le Mistral (peut prendre plusieurs minutes)...")
    if run_command("ollama pull mistral"):
        log("‚úÖ Mod√®le Mistral install√©", "SUCCESS")
    else:
        log("‚ö†Ô∏è  Le mod√®le Mistral sera t√©l√©charg√© au premier usage", "WARNING")
    
    return True

def create_configuration_files():
    """Cr√©e les fichiers de configuration"""
    log("Cr√©ation des fichiers de configuration...", "STEP")
    
    # Copie du .env.example vers .env si n'existe pas
    if not Path(".env").exists():
        log("Cr√©ation du fichier .env...")
        with open(".env", "w") as f:
            f.write("# LUMA Business Pro - Configuration\n")
            f.write("# √âditez ce fichier avec vos cl√©s API\n\n")
            f.write("ANTHROPIC_API_KEY=\n")
            f.write("OPENAI_API_KEY=\n")
            f.write("GEMINI_API_KEY=\n\n")
            f.write("MEDICAL_MONITORING=true\n")
            f.write("VOICE_ENABLED=true\n")
            f.write("LUMA_HOST=127.0.0.1\n")
            f.write("LUMA_PORT=8080\n")
            f.write("LOG_LEVEL=INFO\n")
    
    # Configuration JSON avanc√©e
    config = {
        "version": "1.0.0",
        "installation_date": time.strftime("%Y-%m-%d %H:%M:%S"),
        "modules": {
            "medical_monitoring": True,
            "ai_brain": True,
            "domotic_control": True,
            "business_analytics": True,
            "voice_interface": True
        },
        "ai_models": {
            "claude": {"enabled": False, "priority": 1},
            "gpt": {"enabled": False, "priority": 2},
            "gemini": {"enabled": False, "priority": 3},
            "local": {"enabled": True, "priority": 4}
        }
    }
    
    with open("config/luma_config.json", "w") as f:
        json.dump(config, f, indent=2)
    
    log("‚úÖ Fichiers de configuration cr√©√©s", "SUCCESS")

def setup_permissions():
    """Configure les permissions syst√®me macOS"""
    log("Configuration des permissions syst√®me...", "STEP")
    
    print(f"\n{Colors.YELLOW}üîê PERMISSIONS SYST√àME REQUISES{Colors.END}")
    print("LUMA aura besoin des autorisations suivantes :")
    print("  üì∑ Cam√©ra - Pour surveillance m√©dicale")
    print("  üé§ Microphone - Pour commandes vocales")
    print("  üîî Notifications - Pour alertes")
    print("  üîê Accessibilit√© - Pour contr√¥le syst√®me")
    print("\nAutorisez ces permissions quand macOS les demande.")
    
    input(f"\n{Colors.CYAN}Appuyez sur Entr√©e quand vous √™tes pr√™t(e) √† continuer...{Colors.END}")
    
    # Test rapide des permissions
    try:
        import cv2
        cap = cv2.VideoCapture(0)
        if cap.isOpened():
            log("‚úÖ Acc√®s cam√©ra autoris√©")
            cap.release()
        else:
            log("‚ö†Ô∏è  Acc√®s cam√©ra √† autoriser", "WARNING")
    except:
        log("‚ö†Ô∏è  OpenCV pas encore disponible", "WARNING")

def create_desktop_shortcut():
    """Cr√©e un raccourci sur le bureau"""
    log("Cr√©ation du raccourci bureau...", "STEP")
    
    script_content = f'''#!/bin/bash
cd "{Path.cwd()}"
./launch_luma.sh --start
'''
    
    # Script de lancement sur le bureau
    desktop_script = Path.home() / "Desktop" / "Lancer LUMA.command"
    with open(desktop_script, "w") as f:
        f.write(script_content)
    
    # Rendre ex√©cutable
    run_command(f"chmod +x '{desktop_script}'")
    
    log("‚úÖ Raccourci cr√©√© sur le bureau", "SUCCESS")

def final_setup():
    """Configuration finale"""
    log("Configuration finale...", "STEP")
    
    # Rendre les scripts ex√©cutables
    scripts = ["launch_luma.sh"]
    for script in scripts:
        if Path(script).exists():
            run_command(f"chmod +x {script}")
    
    # Test de d√©marrage rapide
    log("Test de d√©marrage...")
    
    # Cr√©er un fichier de test simple
    test_server = '''
from flask import Flask
app = Flask(__name__)

@app.route('/')
def hello():
    return "<h1>ü§ñ LUMA Business Pro - Test OK!</h1><p>Installation r√©ussie!</p>"

if __name__ == '__main__':
    app.run(host='127.0.0.1', port=8081, debug=False)
'''
    
    with open("test_server.py", "w") as f:
        f.write(test_server)
    
    log("‚úÖ Configuration finale termin√©e", "SUCCESS")

def display_next_steps():
    """Affiche les prochaines √©tapes"""
    print(f"\n{Colors.GREEN}{Colors.BOLD}üéâ INSTALLATION LUMA TERMIN√âE !{Colors.END}\n")
    
    next_steps = f"""
{Colors.PURPLE}{Colors.BOLD}üìã PROCHAINES √âTAPES :{Colors.END}

{Colors.CYAN}1. Configuration des cl√©s API :{Colors.END}
   ‚Ä¢ √âditez le fichier .env avec vos cl√©s
   ‚Ä¢ Au minimum une cl√© IA (Claude recommand√©e)
   
{Colors.CYAN}2. Test de l'installation :{Colors.END}
   ‚Ä¢ Double-cliquez sur "Lancer LUMA.command" sur le bureau
   ‚Ä¢ Ou dans Terminal : ./launch_luma.sh --start
   
{Colors.CYAN}3. Premi√®re utilisation :{Colors.END}
   ‚Ä¢ Ouvrez http://127.0.0.1:8080 dans votre navigateur
   ‚Ä¢ Autorisez les permissions syst√®me
   ‚Ä¢ Testez "Hey Luma" pour les commandes vocales
   
{Colors.CYAN}4. Configuration m√©dicale :{Colors.END}
   ‚Ä¢ Remplissez vos contacts d'urgence dans .env
   ‚Ä¢ Testez le bouton d'urgence (mode simulation)
   
{Colors.CYAN}5. Int√©grations business :{Colors.END}
   ‚Ä¢ Connectez Shopify, Gmail, r√©seaux sociaux
   ‚Ä¢ Configurez vos appareils domotique

{Colors.YELLOW}‚ö†Ô∏è  IMPORTANT :{Colors.END}
   ‚Ä¢ Sauvegardez votre fichier .env de mani√®re s√©curis√©e
   ‚Ä¢ Ne partagez jamais vos cl√©s API
   ‚Ä¢ Testez les fonctionnalit√©s une par une

{Colors.GREEN}üöÄ LUMA est pr√™t √† r√©volutionner votre productivit√© !{Colors.END}
    """
    
    print(next_steps)

def main():
    """Installation principale"""
    print_banner()
    
    try:
        # √âtapes d'installation
        steps = [
            ("V√©rification syst√®me", check_system_requirements),
            ("Structure projet", create_project_structure),
            ("Environnement virtuel", setup_virtual_environment),
            ("D√©pendances Python", install_python_dependencies),
            ("Ollama IA locale", install_ollama),
            ("Fichiers configuration", create_configuration_files),
            ("Permissions syst√®me", setup_permissions),
            ("Raccourci bureau", create_desktop_shortcut),
            ("Configuration finale", final_setup)
        ]
        
        for step_name, step_func in steps:
            log(f"üîÑ {step_name}...", "STEP")
            
            try:
                result = step_func()
                if result is False:
                    log(f"‚ùå √âchec √©tape: {step_name}", "ERROR")
                    sys.exit(1)
            except Exception as e:
                log(f"‚ùå Erreur √©tape {step_name}: {e}", "ERROR")
                sys.exit(1)
        
        # Affichage final
        display_next_steps()
        
    except KeyboardInterrupt:
        log("\nüõë Installation annul√©e par l'utilisateur", "WARNING")
        sys.exit(1)
    except Exception as e:
        log(f"\nüí• Erreur fatale: {e}", "ERROR")
        sys.exit(1)

if __name__ == "__main__":
    main()
